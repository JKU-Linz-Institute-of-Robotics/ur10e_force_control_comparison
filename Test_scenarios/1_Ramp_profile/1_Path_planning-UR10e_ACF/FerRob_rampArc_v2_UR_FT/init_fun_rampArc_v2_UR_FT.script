# define TCP force control function
thread thread_properties_calculation_FT_TCP():
    while (True):
      # dynamically change force frame to actual TCP frame (no additional frame transformation needed)
      force_mode(get_actual_tcp_pose(), force_selection_vector, FT_d, 2, limits)
      sync()
    end
end

# define path planning function
def doRampArcTest(p0s, p1s, p1m, p1e, p2m, p2e, p3m, p3e, p4m, p4e, p5m, p5e, p6m, p6e, p7, p7e, vel, acc, dec, blend_rad, blend_rad_ramp):
    ori_mode = 0 # interpolate orientation
 
    # activate force control with TCP frame as force frame (force variable will be changed dynamically)
    global thread_handler_FT_TCP = run thread_properties_calculation_FT_TCP()
	
    # move to init / contact position and wait
    movel(p0s, a=acc, v=vel) # avoid high deceleration for force control
    sleep(4)

    # start movement
    movep(p1s, a=acc, v=vel, r=blend_rad)
    movec(p1m, p1e, a=acc, v=vel, r=blend_rad, mode=ori_mode)
    movec(p2m, p2e, a=acc, v=vel, r=blend_rad, mode=ori_mode)
    movec(p3m, p3e, a=acc*0.7, v=vel, r=blend_rad_ramp, mode=ori_mode)
    movec(p4m, p4e, a=acc*0.7, v=vel, r=blend_rad_ramp, mode=ori_mode)
    movec(p5m, p5e, a=acc, v=vel, r=blend_rad, mode=ori_mode)
    movec(p6m, p6e, a=acc, v=vel, r=blend_rad, mode=ori_mode)
    movep(p7, a=acc, v=vel, r=0) # no blend
    
    # stop the movement and wait
    stopl(dec)
    sleep(2)

    # kill force control thread and reset robot mode to normal operation
    kill thread_handler_FT_TCP
    end_force_mode()

    # move upwards
    movel(p7e, a=acc*3, v=vel)
end
